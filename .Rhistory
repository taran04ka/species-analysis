# Select a random sample of 2 flights per carrier
random_flights_carrier <- flights %>%
group_by(carrier) %>%
slice_sample(n = 2)
# Display the result
random_flights_carrier
# Count the number of flights for each origin-destination pair
flight_counts_od <- flights %>%
count(origin, dest, sort = TRUE)
# Display the result
flight_counts_od
# Count the number of flights per carrier
flight_counts_carrier <- flights %>%
count(carrier, sort = TRUE)
# Display the result
flight_counts_carrier
# View the airlines dataset
airlines
# Perform a left join to add airline names to flights data
flights_with_airlines <- flights %>%
left_join(airlines, by = "carrier")
# Display the result
flights_with_airlines
# Create two small data frames
df1 <- data.frame(id = 1:3, value = c("A", "B", "C"))
df2 <- data.frame(id = 4:6, value = c("D", "E", "F"))
# Bind the rows together
combined_rows <- bind_rows(df1, df2)
# Display the result
combined_rows
# Create two small data frames with the same number of rows
df3 <- data.frame(id = 1:3, value = c("A", "B", "C"))
df4 <- data.frame(score = c(90, 85, 88))
# Bind the columns together
combined_cols <- bind_cols(df3, df4)
# Display the result
combined_cols
# Convert all column names to uppercase
flights_upper <- flights %>%
rename_with(toupper)
# Display the result
flights_upper
# Replace underscores with dashes in column names
flights_renamed <- flights %>%
rename_with(~ str_replace_all(., "_", "-"))
# Display the result
flights_renamed
# Create a data frame with only 'gain' and 'speed' columns
flights_transmuted <- flights %>%
transmute(
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
# Display the result
flights_transmuted
expensive_cars <- mtcars %>%
filter(mpg > 20 & cyl == 6)
expensive_cars
ordered_cars <- mtcars %>%
order_by(cyl, wt)
ordered_cars <- mtcars %>%
arrange(cyl, wt)
ordered_cars
ordered_cars <- mtcars %>%
arrange(cyl, desc(wt))
ordered_cars
mpg_hp <- mtcars %>%
select(mpg, hp)
mpg_hp
gears <- mtcars %>%
distinct(gear)
gears
cars_perf <- mtcars %>%
mutate(Performance = hp/wt)
cars_perf
av_hp_by_cyl <- mtcars %>%
group_by(cyl) %>%
summarize(avg_hp = mean(hp))
av_hp_by_cyl
mpg_low_high <- mtcars %>%
group_by(mpg) %>%
summarize(min(), max())
mpg_low_high
mpg_low_high <- bind_cols(
mtcars %>%
arrange(mpg) %>%
slice_max(n=1),
mtcars %>%
arrange(mpg) %>%
slice_min(n=1))
mpg_low_high <- bind_cols(
mtcars %>%
order_by(mpg) %>%
slice_max(n=1),
mtcars %>%
order_by(mpg) %>%
slice_min(n=1))
trans <- mtcars %>%
mutate(transmission = if_else(am == 0, Automatic, Manual))
trans <- mtcars %>%
mutate(transmission = if_else(am == 0, "Automatic", "Manual"))
trans
mpg_low_high <- bind_cols(
mtcars %>%
slice_max(n=1),
mtcars %>%
slice_min(n=1))
mpg_low_high <- bind_cols(
mtcars %>%
slice_max(mpg, n=1),
mtcars %>%
slice_min(mpg, n=1))
mpg_low_high
mtcars %>%
slice_max(mpg, n=1)
mtcars %>%
slice_min(mpg, n=1)
mpg_low_high <- bind_row(
mtcars %>%
slice_max(mpg, n=1),
mtcars %>%
slice_min(mpg, n=1))
mpg_low_high <- bind_rows(
mtcars %>%
slice_max(mpg, n=1),
mtcars %>%
slice_min(mpg, n=1))
mpg_low_high
perf_gt_30 <- mtcars %>%
mutate(Performance = hp / wt) %>%
filter(Performance > 30)
perf_gt_30 <- mtcars %>%
mutate(Performance = hp / wt) %>%
filter(Performance > 30)
perf_gt_30
renamed_cars <- mtcars %>%
rename(hp = horsepower, wt = weight)
renamed_cars <- mtcars %>%
rename(hp = "horsepower", wt = "weight")
renamed_cars <- mtcars %>%
rename(hp = horsepower) %>%
rename(wt = weight)
renamed_cars <- mtcars %>%
rename(hp = horsepower, wt = weight)
renamed_cars <- mtcars %>%
rename(horsepower = hp, weight = wt)
renamed_cars
delay_2_more <- nycflights13::flights %>%
filter(arr_delay >= 2)
delay_2_more <- nycflights13::flights %>%
filter(arr_delay >= 2)
delay_2_more
delay_2_more <- nycflights13::flights %>%
filter(arr_delay >= 120)
delay_2_more
houst_flights <- nycflights13::flights %>%
filter(dest %in% c('IAH', 'HOU'))
houst_flights
dif_airs <- flights %>%
filter(carrier %in% c('UA', 'AA', 'DL'))
dif_airs
sum_flights <- flights %>%
filter(month %in% c(7,8,9))
sum_flights
del_flights <- flights %>%
filter(arr_delay > 120 & dep_delay <= 0)
del_flights
mad_up <- flights %>%
filter(dep_delay > 60 & arrival delay <= departure delay - 30)
mad_up <- flights %>%
filter(dep_delay > 60 & arr_delay <= dep_delay - 30)
mad_up
late_morning_flights <- flights %>%
arrange(dep_delay, dep_time)
late_morning_flights <- flights %>%
arrange(dep_delay, dep_time)
late_morning_flights
late_morning_flights <- flights %>%
arrange(desc(dep_delay), dep_time)
late_morning_flights
species
# Define the required libraries
libs <- c("tidyverse", "nycflights13")
# Check if libraries are installed; install missing ones
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == FALSE)) {
install.packages(libs[!installed_libs])
}
# Load the libraries
library(tidyverse)
library(nycflights13)
# Display the first few rows of the billboard dataset
billboard
# Tidy the billboard dataset by pivoting longer
billboard_tidy <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) %>%
mutate(
week = parse_number(week)
)
# Display the tidied dataset
billboard_tidy
who2
who2 %>%
pivot_longer(
cols = !(country:year),
names_to = c("diagnosis", "gender", "age"),
names_sep = "_",
values_to = "count"
)
household
household %>%
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_drop_na = TRUE
)
household %>%
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_drop_na = TRUE
) %>%
mutate(
child = parse_number(child)
)
# Display the first few rows of the cms_patient_experience dataset
cms_patient_experience
# Tidy the cms_patient_experience dataset by pivoting wider
cms_wide <- cms_patient_experience %>%
pivot_wider(
id_cols = starts_with("org"),
names_from = measure_cd,
values_from = prf_rate
)
# Display the tidied dataset
cms_wide
# Create a sample tibble with combined column names
df <- tibble(x = c(NA, "x.y", "x.z", "y.z"))
df
# Separate the 'x' column into 'A' and 'B'
df_separated <- df %>%
separate(x, c("A", "B"))
# Display the separated dataset
df_separated
# Separate and handle missing values by removing the first part
df_separated_skip <- df %>%
separate(x, c(NA, "B"))
# Display the separated dataset
df_separated_skip
# Create a sample tibble with multiple columns
df <- expand_grid(x = c("a", NA), y = c("b", NA))
df
# Unite the 'x' and 'y' columns into a new column 'z'
df_united <- df %>%
unite("z", x:y, remove = FALSE)
# Display the united dataset
df_united
# Unite columns and remove missing values
df_united_na <- df %>%
unite("z", x:y, na.rm = TRUE, remove = FALSE)
# Display the united dataset
df_united_na
# Create a sample tibble with missing values
df_fill <- tibble(
group = c("A", "A", "A", "B", "B", "B"),
value = c(1, NA, 3, NA, 5, NA)
)
df_fill
# Fill missing values downward within each group
df_filled <- df_fill %>%
group_by(group) %>%
fill(value, .direction = "down")
# Display the filled dataset
df_filled
# Create a sample tibble with missing values
df_replace_na <- tibble(
name = c("Alice", "Bob", "Charlie", "David"),
score = c(85, NA, 78, NA)
)
df_replace_na
# Replace NA scores with 0
df_replaced <- df_replace_na %>%
replace_na(list(score = 0))
# Display the replaced dataset
df_replaced
# Create a sample tibble with missing combinations
df_complete <- tibble(
group = c("A", "A", "B"),
category = c("X", "Y", "X"),
value = c(10, 20, 30)
)
df_complete
# Complete the dataset with all combinations of group and category
df_fully_complete <- df_complete %>%
complete(group, category)
# Display the completed dataset
df_fully_complete
df <- tibble(
id = 1:5,
name = 'A':'E',
score1 = sample(50:100, size = 5),
score2 = sample(50:100, size = 5),
score3 = sample(50:100, size = 5),
)
df <- tibble(
id = 1:5,
name = c('A','B','C','D','E'),
score1 = sample(50:100, size = 5),
score2 = sample(50:100, size = 5),
score3 = sample(50:100, size = 5),
)
df
df %>%
pivot_longer(
starts_with("score"),
names_to = test,
values_to = score
) %>%
mutate(
test = parse_number(test)
)
df %>%
pivot_longer(
starts_with("score"),
names_to = "test",
values_to = "score"
) %>%
mutate(
test = parse_number(test)
)
df
df %>%
pivot_longer(
starts_with("score"),
names_to = "test",
values_to = "score"
) %>%
mutate(
test = parse_number(test)
)
df_long <- df %>%
pivot_longer(
starts_with("score"),
names_to = "test",
values_to = "score"
) %>%
mutate(
test = parse_number(test)
)
df_long <- df %>%
pivot_longer(
starts_with("score"),
names_to = "test",
values_to = "score"
) %>%
mutate(
test = parse_number(test)
)
df_long <- df %>%
pivot_longer(
starts_with("score"),
names_to = "test",
values_to = "score"
) %>%
mutate(
test = parse_number(test)
)
df_long
df_reg <- df_long %>%
pivot_wider(
names_from = "test",
values_from = "score"
)
df_reg
? pivot_longer
df_reg <- df_long %>%
pivot_wider(
names_from = "test",
names_prefix = "score",
values_from = "score"
)
df_reg
? separate
df_dates <- tibble(
datetime = c("2024-12-28 21:37:14", "2019-09-13 13:38:32")
) %>%
separate(
datetime,
c("date", "time"),
sep = " "
)
df_dates
?unite
df_un <- df_dates %>%
unite(
datetime,
sep = " "
)
df_un
df_missing <- tibble(
id = 1:5,
score = c(14, 69, NA, 88, NA)
)
df_missing
df_missing %>%
fill("down")
? fill
df_missing %>%
fill(score, "down")
df_missing %>%
fill(score, direction = "down")
df_missing %>%
fill(score, .direction = "down")
? replace_na
df_missing %>%
replace_na(mean(df_missing, score))
df_missing %>%
replace_na(list(score = mean(df_missing, score))
df_missing %>%
replace_na(list(score = mean(df_missing, score)))
? mean
df_missing %>%
replace_na(list(score = mean(score)))
df_missing %>%
replace_na(list(score = mean(df_missing.score)))
df_missing %>%
replace_na(list(score = mean(as_vector(score))))
df_missing %>%
replace_na(list(score = mean(data_frame$score)))
df_missing %>%
replace_na(list(score = mean(data_frame[['score']])))
df_missing %>%
replace_na(list(score = mean(data_frame[[score]])))
df_missing %>%
replace_na(list(score = mean(data_frame[['score']])))
df_missing %>%
replace_na(list(score = mean(df_missing[['score']])))
df_missing %>%
replace_na(list(score = mean(df_missing$score)))
? mean
df_missing %>%
replace_na(list(score = mean(df_missing$score), na.rm))
df_missing %>%
replace_na(list(score = mean(df_missing$score), na.rm = TRUE))
df_missing %>%
replace_na(list(score = mean(x = df_missing$score), na.rm = TRUE))
df_missing <- tibble(
id = 1:5,
score = c(12, 15, NA, 16, NA)
)
df_missing
df_missing %>%
fill(score, .direction = "down")
df_missing %>%
replace_na(list(score = mean(x = df_missing$score), na.rm = TRUE))
df_missing %>%
replace_na(list(score = mean(x = df_missing$score, na.rm = TRUE)))
df_complete <- tibble(
id = c(1,NA,3, NA),
category = c(NA, "product", NA, "service")
)
df_complete
? complete
df_complete %>%
complete(fill = 0)
df_complete %>%
complete(fill = list(id = 0, category = 0))
df_complete %>%
complete(fill = list(id = 0, category = '0'))
df_complete %>%
complete(id, category, fill = list(category = '0'))
df_complete %>%
complete(id, category, fill = list(id = 0, category = '0'))
df_multi <- tibble(
id = 1:5,
s_f_3 = c(11,14,2,23,4),
b_f_4 = c(12,34,32,12,13),
s_m_3 = c(45,34,2,3,23),
b_m_4 = c(23,32,43,12,54)
)
df_multi
?separate
#df_multi <- tibble(
#  id = 1:5,
#  s_f_3 = c(11,14,2,23,4),
#  b_f_4 = c(12,34,32,12,13),
#  s_m_3 = c(45,34,2,3,23),
#  b_m_4 = c(23,32,43,12,54)
#)
df_multi <- tibble(
type_gender_age = c("small_female_3", "big_female_4", "small_male_3", "big_male_4")
) %>%
separate(type_gender_age, c("Type", "Gender", "age"), "_")
#df_multi <- tibble(
#  id = 1:5,
#  s_f_3 = c(11,14,2,23,4),
#  b_f_4 = c(12,34,32,12,13),
#  s_m_3 = c(45,34,2,3,23),
#  b_m_4 = c(23,32,43,12,54)
#)
df_multi <- tibble(
type_gender_age = c("small_female_3", "big_female_4", "small_male_3", "big_male_4")
) %>%
separate(type_gender_age, c("Type", "Gender", "age"), "_")
df_multi
